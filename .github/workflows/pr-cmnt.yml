name: Post Build Zip

on:
  pull_request:
     types: [opened, synchronize, reopened]
     branches:
        - main

jobs:
  testing-action:
    runs-on: ubuntu-latest
    permissions:
        issues: write
        pull-requests: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.2

      - name: Install dependencies
        run: npm install
      
      - name: Install zip
        run: sudo apt-get install -y zip

      - name: Build project & zip
        run: npm run build && zip -r build.zip build

      - name: Create a Release and Upload build.zip
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          # Get the pull request number
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          TAG="pr-${PR_NUMBER}-build"

          # Create a release
          release_response=$(curl -sX POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"tag_name\": \"$TAG\", \"name\": \"$TAG\", \"body\": \"Release for PR #$PR_NUMBER\"}" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/releases")
          
          # Verify release response
          echo "$release_response"

          # Extract the upload URL for the release
          upload_url=$(echo "$release_response" | jq --raw-output .upload_url | sed "s/{?name,label}//")

          if [ -z "$upload_url" ]; then
            echo "Error: Failed to create a release."
            echo "Response: $release_response"
            exit 1
          fi

          # Upload the build.zip file to the release
          upload_response=$(curl -sX POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/zip" \
            --data-binary @build.zip \
            "$upload_url?name=build.zip")

          # Extract the download URL for the uploaded file
          download_url=$(echo "$upload_response" | jq --raw-output .browser_download_url)

          if [ -z "$download_url" ]; then
            echo "Error: Failed to upload the build.zip file."
            echo "Response: $upload_response"
            exit 1
          fi

          # Set the download URL as an output
          echo "::set-output name=download_url::$download_url"

      - name: Post PR Comment with build.zip Link
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          # Get the pull request number
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          DOWNLOAD_URL=${{ steps.create_release.outputs.download_url }}

          # Post a comment on the pull request with the link to the zip file
          comment_response=$(curl -sX POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"body\": \"### PR - #$PR_NUMBER. \n ### ðŸŽ‰ Here is your build zip file! \n [Download Build Zip]($DOWNLOAD_URL) \"}" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments")

          # Extract and print the comment URL from the comment response
          comment_url=$(echo "$comment_response" | jq --raw-output .html_url)

          if [ -z "$comment_url" ]; then
            echo "Error: Failed to post a comment on the pull request."
            echo "Response: $comment_response"
            exit 1
          fi

          echo "Comment posted at: $comment_url"
